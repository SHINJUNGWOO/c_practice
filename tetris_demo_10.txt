#include <stdio.h>
#include <windows.h>
#include <stdlib.h>
#include <time.h>
#include <conio.h>
#define MAX 100

void secondmain();
int block();
int blockmove(int(*cube1)[4][4], int blockkind);
void array();
int outline[30][31] = { 0 };
void blockturnl(int(*cube1)[4][4], int blockkind);
void blockturnr(int(*cube1)[4][4], int blockkind);
int i, j = 0;
void clear();
int absx, absy;
void right(int(*cube1)[4][4], int blockkind);
void left(int(*cube1)[4][4], int blockkind);
int wall(int(*cube1)[4][4], int blockkind);
void fall(int(*cube1)[4][4], int blockkind);
void down(int(*cube1)[4][4], int blockkind);
void up(int(*cube1)[4][4], int blockkind);
void check();
void shadow();
void reset(int(*cube1)[4][4], int blockkind);
int choice();
void arrayclean();
void showup();
void gameover(int(*cube1)[4][4], int blockkind);
int score = 0;
int grade = 1;
int speed = 200;


void gotoxy(int x, int y)
{
	COORD Cur;
	Cur.X = x;
	Cur.Y = y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Cur);
}

int main()
{
	secondmain();
}

void secondmain()
{
	for (int a = 1; a<31; a += 2)
	{
		int b = 0;
		gotoxy(a, b);
		printf("▩");
		outline[a][b] = 1;

		b = 30;
		gotoxy(a, b);
		printf("▩");
		outline[a][b] = 1;
	}
	for (int b = 1; b<31; b++)
	{

		int a = 1;
		gotoxy(a, b);
		printf("▩");
		outline[a][b] = 1;
		a = 29;
		gotoxy(a, b);
		printf("▩");
		outline[a][b] = 1;
	}
	int mode = 0;
	mode = choice();
	arrayclean();
	switch (mode)
	{
	case 1:
		
		arrayclean();
		array();
		absx = 3;
		absy = 1;
		block();
		break;
	case 2:
		arrayclean();
		array();
		showup();


	}

}

int block()
{
	check();
	array();
	absx = 3;
	absy = 3;
	array();
	srand((unsigned)time(NULL));
	int blockkind = rand() % 7;
	//blockkind = 3;
	int cube1[7][4][4] =
	{

		0,0,0,0,
		0,1,1,0,
		0,1,1,0,
		0,0,0,0,

		0,0,0,0,
		0,1,1,0,
		0,1,0,0,
		0,1,0,0,

		0,0,0,0,
		0,1,1,0,
		0,0,1,0,
		0,0,1,0,

		0,0,0,0,
		1,1,1,1,
		0,0,0,0,
		0,0,0,0,

		0,0,0,0,
		0,0,1,0,
		0,1,1,0,
		0,1,0,0,

		0,0,0,0,
		0,1,0,0,
		0,1,1,0,
		0,0,1,0,

		0,0,0,0,
		0,1,0,0,
		1,1,1,0,
		0,0,0,0

	};

	absx = 11;
	absy = 3;
	gotoxy(absx, absy);

	for (i = 0; i<4; i++)
	{
		for (j = 0; j<4; j++)
		{
			gotoxy(absx + (i * 2), absy + j);
			if (cube1[blockkind][i][j] == 1)
			{

				printf("▦");
			}

		}

	}
	while (1)
	{
		blockmove(cube1, blockkind);
	}
}

int blockmove(int(*cube1)[4][4], int blockkind)
{
	int key = 0;

	while (1)
	{
		
		if (kbhit())
		{
			key = getch();
			switch (key)
			{
			case 100:
				shadow();
				right(cube1, blockkind);
				array();
				gotoxy(absx, absy);
				if (wall(cube1, blockkind) == 1) {
					left(cube1, blockkind);
					array();

				}

				break;
			case 97:
				shadow();
				left(cube1, blockkind);
				array();
				gotoxy(absx, absy);
				if (wall(cube1, blockkind) == 1) {
					right(cube1, blockkind);
					array();
				}
				break;
			case 115:


				down(cube1, blockkind);
				if (wall(cube1, blockkind) == 1)
				{
					up(cube1, blockkind);
					array();
					break;
				}

				break;
			case 122:


				while (wall(cube1, blockkind) != 1)
				{
					down(cube1, blockkind);

				}
				up(cube1, blockkind);
				array();
				break;

				break;
			case 101:
				shadow();
				blockturnl(cube1, blockkind);
				array();
				gotoxy(absx, absy);
				if (wall(cube1, blockkind) == 1)
				{
					blockturnr(cube1, blockkind);
					array();
				}

				break;
			case 112:
				reset(cube1, blockkind);
				blockmove(cube1, blockkind);

			case 113:
				shadow();
				blockturnr(cube1, blockkind);
				array();
				gotoxy(absx, absy);
				if (wall(cube1, blockkind) == 1)
				{
					blockturnl(cube1, blockkind);
					array();
				}
				break;
			}
		}
		gameover(cube1,blockkind);
		fall(cube1, blockkind);
		
		

	}
}

void array()
{

	for (int a = 1; a<31; a += 2)
	{
		for (int b = 0; b<31; b++)
		{
			if (outline[a][b] == 1)
			{
				gotoxy(a, b);
				printf("▩");
			}
		}
	}
	gotoxy(absx, absy);

	gotoxy(5, 33);
	printf("점수는 : %2d", score);
	gotoxy(absx, absy);
	gotoxy(18, 33);
	printf("난이도 : %2d", grade);
	gotoxy(absx, absy);

	//제 2사분면의 안쪽 최초 좌표는 (3,1) 
	// 제 1사분면의 안쪽 최초 좌표는 (28,1 )
	//제 4사분면의 안쪽 최초 좌표는 (28,29 )
	//제 3사분면의 안쪽 최초 좌표는 (3,29 )	


}

void blockturnl(int(*cube1)[4][4], int blockkind)
{
	int copy[4][4] = { 0 };

	for (i = 0; i<4; i++)
	{
		for (j = 0; j<4; j++)
		{
			copy[i][j] = cube1[blockkind][i][j];
		}

	}
	for (i = 0; i<4; i++)
	{
		for (j = 0; j<4; j++)
		{
			cube1[blockkind][i][j] = copy[3 - j][i];
		}

	}

	clear();
	for (i = 0; i<4; i++)
	{
		for (j = 0; j<4; j++)
		{
			gotoxy(absx + (i * 2), absy + j);
			if (cube1[blockkind][i][j] == 1)
			{

				printf("▦");
			}

		}

	}
	array();
	gotoxy(absx, absy);
}

void blockturnr(int(*cube1)[4][4], int blockkind)
{
	int copy[4][4] = { 0 };

	for (i = 0; i<4; i++)
	{
		for (j = 0; j<4; j++)
		{
			copy[i][j] = cube1[blockkind][i][j];
		}

	}
	for (i = 0; i<4; i++)
	{
		for (j = 0; j<4; j++)
		{
			cube1[blockkind][i][j] = copy[j][3 - i];
		}

	}

	clear();
	for (i = 0; i<4; i++)
	{
		for (j = 0; j<4; j++)
		{
			gotoxy(absx + (i * 2), absy + j);
			if (cube1[blockkind][i][j] == 1)
			{

				printf("▦");
			}

		}

	}
	array();
	gotoxy(absx, absy);
}

void clear()
{
	for (i = 0; i<4; i++)
	{
		for (j = 0; j<4; j++)
		{
			gotoxy(absx + (i * 2), absy + j);
			printf("  ");
		}

	}
}

int wall(int(*cube1)[4][4], int blockkind)
{
	int check[4][4] = { 0 };
	for (i = 0; i<4; i++)
	{
		for (j = 0; j<4; j++)
		{
			check[i][j] = cube1[blockkind][i][j] + outline[absx + 2 * i][absy + j];
			if (check[i][j] == 2)
			{
				return 1;
			}
		}
	}
}

void right(int(*cube1)[4][4], int blockkind)
{
	clear();
	gotoxy(absx += 2, absy);
	for (i = 0; i<4; i++)
	{
		for (j = 0; j<4; j++)
		{
			gotoxy(absx + (i * 2), absy + j);
			if (cube1[blockkind][i][j] == 1)
			{

				printf("▦");
			}

		}
	}
}

void left(int(*cube1)[4][4], int blockkind)
{
	clear();
	gotoxy(absx -= 2, absy);
	for (i = 0; i<4; i++)
	{
		for (j = 0; j<4; j++)
		{
			gotoxy(absx + (i * 2), absy + j);
			if (cube1[blockkind][i][j] == 1)
			{

				printf("▦");
			}

		}
	}
}

void down(int(*cube1)[4][4], int blockkind)
{
	clear();
	gotoxy(absx, absy += 1);
	for (i = 0; i<4; i++)
	{
		for (j = 0; j<4; j++)
		{
			gotoxy(absx + (i * 2), absy + j);
			if (cube1[blockkind][i][j] == 1)
			{

				printf("▦");
			}

		}
	}

	int bx = absx, by = absy;
	while (wall(cube1, blockkind) != 1)
	{
		gotoxy(absx, absy += 1);

	}
	gotoxy(absx, absy -= 1);
	for (i = 0; i<4; i++)
	{
		for (j = 0; j<4; j++)
		{
			gotoxy(absx + (i * 2), absy + j);
			if (cube1[blockkind][i][j] == 1)
			{

				printf("□");
				outline[absx + (i * 2)][absy + j] = -1;

			}

		}
	}

	absx = bx;
	absy = by;
	gotoxy(absx, absy);
	clear();
	for (i = 0; i<4; i++)
	{
		for (j = 0; j<4; j++)
		{
			gotoxy(absx + (i * 2), absy + j);
			if (cube1[blockkind][i][j] == 1)
			{

				printf("▦");
			}

		}
	}


	array();

}

void up(int(*cube1)[4][4], int blockkind)
{
	clear();
	gotoxy(absx, absy -= 1);
	for (i = 0; i<4; i++)
	{
		for (j = 0; j<4; j++)
		{
			gotoxy(absx + (i * 2), absy + j);
			if (cube1[blockkind][i][j] == 1)
			{

				printf("▦");
			}

		}
	}
	array();
}

void fall(int(*cube1)[4][4], int blockkind)
{
	clock_t vind;
	vind = clock();


	if (vind % speed == 0)
	{


		down(cube1, blockkind);
		if (wall(cube1, blockkind) == 1)
		{
			up(cube1, blockkind);
			for (i = 0; i<4; i++)
			{
				for (j = 0; j<4; j++)
				{
					if (cube1[blockkind][i][j] == 1)
					{
						outline[absx + (i * 2)][absy + j] = 1;

					}
				}
			}

			clear();

			array();
			block();
		}

	}

}

void check()
{

	{
		for (int b = 1; b<30; b++)
		{
			if (outline[3][b] == 1 && outline[5][b] == 1 && outline[7][b] == 1 && outline[9][b] == 1 && outline[11][b] == 1 && outline[13][b] == 1 && outline[15][b] == 1 && outline[17][b] == 1 &&
				outline[19][b] == 1 && outline[21][b] == 1 && outline[23][b] == 1 && outline[25][b] == 1 && outline[27][b] == 1)

			{
				int c = b;
				for (int a = 3; a<29; a += 2)
				{
					gotoxy(a, b);
					printf(" ");
				}
				for (b = c; b>1; b--)
				{
					for (int a = 3; a<29; a += 2)
					{
						outline[a][b] = outline[a][b - 1];
						outline[a][1] = 0;
					}
				}
				for (int a = 3; a<29; a += 2)
				{
					for (int b = 29; b>1; b--)
					{
						gotoxy(a, b);
						printf("  ");
					}
				}
				score++;
				if (score>0 && score % 2 == 0 && speed>20)
				{
					speed -= 20;
					grade++;
				}
			}

		}
	}
}

void shadow()
{
	for (int b = 1; b < 30; b++)
	{
		for (int a = 3; a < 29; a += 2)
		{
			if (outline[a][b] == -1)
			{
				outline[a][b] = 0;
				gotoxy(a, b);
				printf("  ");

			}
		}
	}
	gotoxy(absx, absy);
}

void reset(int(*cube1)[4][4], int blockkind)
{
	speed = 200;
	score = 0;
	grade = 1;
	shadow();
	for (int b = 1; b < 30; b++)
	{
		for (int a = 3; a < 29; a += 2)
		{
			if (outline[a][b] == 1)
			{
				outline[a][b] = 0;
				gotoxy(a, b);
				printf("  ");

			}
		}
	}
	

}

int choice()
{
	gotoxy(7, 3);
	int pick = 0;

	gotoxy(5, 3);
	printf("게임모드를 설정해주세요");
	array();
	gotoxy(5, 4);
	printf("1번: 게임실행");
	gotoxy(5, 5);
	printf("2번: 기록열람");
	gotoxy(5, 6);
	printf("3번: 키세팅 변경");
	array();
	gotoxy(5, 7);
	printf("게임모드 입력 :");
	scanf("%d", &pick);


	array();
	return pick;

}

void arrayclean()
{
	for (int a = 0; a < 31; a++)
	{
		for (int b = 0; b < 31; b++)
		{
			gotoxy(a, b);
			printf(" ");
		}
	}
	
	array();
}

void showup()
{
	FILE *board = fopen("board.txt", "r+");
	char s2[10][MAX] = { NULL };
	int score[MAX] = { 0 };
	for (int i = 0; !feof(board); i++)
	{
		fscanf(board, "%s %d", &s2[i], &score[i]);

	}
	int copy1[MAX] = { 0 };
	int copy2[MAX] = { 0 };
	for (int j = 0; j < 6; j++)
	{
		int max = score[0];
		int point = 0;
		for (int i = 1; i < MAX; i++)
		{
			if (score[i] > max)
			{
				max = score[i];
				point = i;
			}
		}
		copy1[j] = max;
		copy2[j] = point;
		score[point] = 0;
	}
	for (int i = 0; i < 6; i++)
	{
		score[copy2[i]] = copy1[i];

	}
	
	for (int i = 0; i < 6; i++)
	{
		gotoxy(5, i+3);
		printf("%s : %d\n", s2[copy2[i]], score[copy2[i]]);

	}
	fclose(board);
	while (1)
	{
		array();
	
	}



}

void gameover(int(*cube1)[4][4], int blockkind)
{
	if ((outline[3][6] == 1)|| (outline[5][6] == 1) || (outline[7][6] == 1) || (outline[9][6] == 1) || (outline[11][6] == 1) || (outline[13][6] == 1) || (outline[15][6] == 1) || (outline[17][6] == 1))
	{
		arrayclean();
		int grade = score;
		reset(cube1, blockkind);
		FILE *board = fopen("board.txt", "a+");
		char name[20] = { NULL };
		gotoxy(7, 3);
		printf("GAMEOVER");
		gotoxy(5, 4);
		printf("점수:%d", grade);
		gotoxy(5, 5);
		printf("이름을 입력하세요:___\b\b\b");
		scanf("%s", name);
		fprintf(board, "\n%s %d", name, grade);
		fclose(board);
		arrayclean();
		reset(cube1,blockkind);
		gotoxy(absx, absy);
		secondmain();
	}
}